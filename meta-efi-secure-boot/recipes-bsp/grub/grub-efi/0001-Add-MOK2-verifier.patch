From 5f9caacf8a6506dc6d1c65fe3b3e4a6f6d9e9bda Mon Sep 17 00:00:00 2001
From: Yi Zhao <yi.zhao@windriver.com>
Date: Sat, 10 Feb 2024 22:12:16 +0800
Subject: [PATCH] Add MOK2 verifier

Refer to shim lock verifier implementation[1], add MOK2 verifier and
register it during grub initialization. Also disable shim lock verifier
to avoid conflicts.

[1] http://git.savannah.gnu.org/cgit/grub.git/commit/?id=878398c1a39079a54c2836e27e9d1b0eb67a66cd

Upstream-Status: Inappropriate [embedded specific]

Signed-off-by: Yi Zhao <yi.zhao@windriver.com>
---
 grub-core/Makefile.am           |   1 +
 grub-core/Makefile.core.def     |   1 +
 grub-core/kern/efi/init.c       |  10 ++
 grub-core/kern/efi/mok2verify.c | 232 ++++++++++++++++++++++++++++++++
 grub-core/loader/efi/linux.c    |  21 +++
 include/grub/efi/api.h          |  30 +++++
 include/grub/efi/mok2verify.h   |  42 ++++++
 7 files changed, 337 insertions(+)
 create mode 100644 grub-core/kern/efi/mok2verify.c
 create mode 100644 include/grub/efi/mok2verify.h

diff --git a/grub-core/Makefile.am b/grub-core/Makefile.am
index f18550c..3de704a 100644
--- a/grub-core/Makefile.am
+++ b/grub-core/Makefile.am
@@ -72,6 +72,7 @@ KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/device.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/disk.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/dl.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/efi/sb.h
+KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/efi/mok2verify.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/env.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/env_private.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/err.h
diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index 1a6793e..0d42726 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -218,6 +218,7 @@ kernel = {
   efi = kern/acpi.c;
   efi = kern/efi/acpi.c;
   efi = kern/efi/sb.c;
+  efi = kern/efi/mok2verify.c;
   efi = kern/lockdown.c;
   i386_coreboot = kern/i386/pc/acpi.c;
   i386_multiboot = kern/i386/pc/acpi.c;
diff --git a/grub-core/kern/efi/init.c b/grub-core/kern/efi/init.c
index 6c54af6..985845b 100644
--- a/grub-core/kern/efi/init.c
+++ b/grub-core/kern/efi/init.c
@@ -22,6 +22,7 @@
 #include <grub/efi/debug.h>
 #include <grub/efi/disk.h>
 #include <grub/efi/sb.h>
+#include <grub/efi/mok2verify.h>
 #include <grub/lockdown.h>
 #include <grub/term.h>
 #include <grub/misc.h>
@@ -116,6 +117,7 @@ grub_efi_init (void)
   /* Initialize the memory management system.  */
   grub_efi_mm_init ();
 
+#if 0
   /*
    * Lockdown the GRUB and register the shim_lock verifier
    * if the UEFI Secure Boot is enabled.
@@ -125,6 +127,14 @@ grub_efi_init (void)
       grub_lockdown ();
       grub_shim_lock_verifier_setup ();
     }
+#else
+  if (grub_is_secured () == 1)
+    {
+      grub_dprintf ("mok2verify", "Setup MOK2 verifier\n");
+      grub_lockdown ();
+      grub_mok2_verifier_setup ();
+    }
+#endif
 
   grub_efi_system_table->boot_services->set_watchdog_timer (0, 0, 0, NULL);
 
diff --git a/grub-core/kern/efi/mok2verify.c b/grub-core/kern/efi/mok2verify.c
new file mode 100644
index 0000000..98402d8
--- /dev/null
+++ b/grub-core/kern/efi/mok2verify.c
@@ -0,0 +1,232 @@
+/* mok2verify.c - MOK2 Verify Protocol support
+ *
+ * BSD 2-clause "Simplified" License
+ *
+ * Copyright (c) 2017, Lans Zhang <jia.zhang@windriver.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <grub/loader.h>
+#include <grub/file.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/charset.h>
+#include <grub/types.h>
+#include <grub/env.h>
+#include <grub/mm.h>
+#include <grub/efi/api.h>
+#include <grub/efi/efi.h>
+#include <grub/verify.h>
+#include <grub/efi/mok2verify.h>
+
+GRUB_MOD_LICENSE ("GPLv2+");
+
+static grub_guid_t grub_efi_mok2_verify_protoco_guid = EFI_MOK2_VERIFY_PROTOCOL_GUID;
+
+static grub_err_t
+grub_verify_file_buffer ( void **data, grub_size_t *data_size,
+                   void *sigdata, grub_size_t sigdata_size, const char *path);
+
+int
+grub_is_secured (void)
+{
+  grub_guid_t global_guid = GRUB_EFI_GLOBAL_VARIABLE_GUID;
+  void *var = NULL;
+  grub_size_t var_size = 0;
+  int secured = 0;
+
+  grub_efi_get_variable ("SecureBoot", &global_guid, &var_size, &var);
+  if (!var)
+    return grub_error (GRUB_ERR_READ_ERROR, N_("cannot read variable"));
+
+  if (var_size != 1 || *(grub_uint8_t *) var != 1)
+    goto out;
+
+  grub_free (var);
+
+  grub_efi_get_variable ("MokSBState", &grub_efi_mok2_verify_protoco_guid,
+			       &var_size, &var);
+  if (!var || (var_size == 1 && *(grub_uint8_t *) var == 0))
+    secured = 1;
+
+out:
+  grub_free (var);
+
+  return secured;
+}
+
+static grub_err_t
+mok2_verifier_init (grub_file_t io,
+			 enum grub_file_type type,
+			 void **context,
+			 enum grub_verify_flags *flags)
+{
+  *context = io->name;
+  *flags = GRUB_VERIFY_FLAGS_NONE;
+
+  switch (type & GRUB_FILE_TYPE_MASK)
+    {
+    /* Files we check. */
+    case GRUB_FILE_TYPE_LINUX_KERNEL:
+    case GRUB_FILE_TYPE_MULTIBOOT_KERNEL:
+    case GRUB_FILE_TYPE_BSD_KERNEL:
+    case GRUB_FILE_TYPE_XNU_KERNEL:
+    case GRUB_FILE_TYPE_PLAN9_KERNEL:
+    case GRUB_FILE_TYPE_EFI_CHAINLOADED_IMAGE:
+    case GRUB_FILE_TYPE_LINUX_INITRD:
+    case GRUB_FILE_TYPE_CONFIG:
+      *flags = GRUB_VERIFY_FLAGS_SINGLE_CHUNK;
+      return GRUB_ERR_NONE;
+
+    /* Files that do not affect secureboot state. */
+    case GRUB_FILE_TYPE_NONE:
+    case GRUB_FILE_TYPE_LOOPBACK:
+    case GRUB_FILE_TYPE_OPENBSD_RAMDISK:
+    case GRUB_FILE_TYPE_XNU_RAMDISK:
+    case GRUB_FILE_TYPE_SIGNATURE:
+    case GRUB_FILE_TYPE_PUBLIC_KEY:
+    case GRUB_FILE_TYPE_PUBLIC_KEY_TRUST:
+    case GRUB_FILE_TYPE_PRINT_BLOCKLIST:
+    case GRUB_FILE_TYPE_TESTLOAD:
+    case GRUB_FILE_TYPE_GET_SIZE:
+    case GRUB_FILE_TYPE_ZFS_ENCRYPTION_KEY:
+    case GRUB_FILE_TYPE_CAT:
+    case GRUB_FILE_TYPE_HEXCAT:
+    case GRUB_FILE_TYPE_CMP:
+    case GRUB_FILE_TYPE_HASHLIST:
+    case GRUB_FILE_TYPE_TO_HASH:
+    case GRUB_FILE_TYPE_KEYBOARD_LAYOUT:
+    case GRUB_FILE_TYPE_PIXMAP:
+    case GRUB_FILE_TYPE_GRUB_MODULE_LIST:
+    case GRUB_FILE_TYPE_THEME:
+    case GRUB_FILE_TYPE_GETTEXT_CATALOG:
+    case GRUB_FILE_TYPE_FS_SEARCH:
+    case GRUB_FILE_TYPE_LOADENV:
+    case GRUB_FILE_TYPE_SAVEENV:
+    case GRUB_FILE_TYPE_VERIFY_SIGNATURE:
+      *flags = GRUB_VERIFY_FLAGS_SKIP_VERIFICATION;
+      return GRUB_ERR_NONE;
+
+    /* Other files. */
+    default:
+      return grub_error (GRUB_ERR_ACCESS_DENIED, N_("prohibited by secure boot policy"));
+    }
+}
+
+
+static grub_err_t
+mok2_verifier_write (void *context, void *buf, grub_size_t size)
+{
+  grub_file_t sigfile = NULL;
+  grub_ssize_t sigdata_size;
+  void *sigdata = NULL;
+  char *sigpath = NULL;
+
+  grub_dprintf ("mok2verify", "Verifying file %s\n", (char *) context);
+
+  /*By now only supported p7b file veryfing*/
+  sigpath = grub_xasprintf("%s.p7b", (char *) context);
+  sigfile = grub_file_open (sigpath, GRUB_FILE_TYPE_SIGNATURE);
+  if (!sigfile) {
+    grub_error (GRUB_ERR_FILE_NOT_FOUND, N_("Cannot find the signature file %s"),
+                    sigpath);
+    return grub_errno;
+  }
+
+  sigdata_size = grub_file_size (sigfile);
+  sigdata = grub_malloc (sigdata_size);
+  if (!sigdata)
+    goto fail;
+
+  if (grub_file_read (sigfile, sigdata, sigdata_size) != sigdata_size)
+    {
+      if (!grub_errno)
+        grub_error (GRUB_ERR_FILE_READ_ERROR, N_("Cannot read the signature file %s"),
+                    sigpath);
+      goto fail;
+    }
+
+  grub_errno = grub_verify_file_buffer (&buf, &size, sigdata, sigdata_size, context);
+
+  if (grub_errno == GRUB_ERR_NONE)
+    grub_dprintf ("mok2verify", "file %s verified\n", (char *) context);
+  else
+    grub_error (grub_errno, N_("failed to verify file %s"), (char *) context);
+
+fail:
+  if (sigdata)
+    grub_free (sigdata);
+
+  if (sigfile)
+    grub_file_close (sigfile);
+
+  return grub_errno;
+}
+
+static grub_err_t
+grub_verify_file_buffer ( void **data, grub_size_t *data_size,
+                   void *sigdata, grub_size_t sigdata_size, const char *path)
+{
+  efi_mok2_verify_protocol_t *mok2;
+  grub_efi_status_t status;
+
+  mok2 = grub_efi_locate_protocol (&grub_efi_mok2_verify_protoco_guid, 0);
+  if (!mok2)
+    {
+      grub_dprintf ("mok2verify", "unable to load mok2 verify protocol\n");
+      return GRUB_ERR_NONE;
+    }
+
+  grub_dprintf ("mok2verify", "attempting to verify file %s ...\n", path);
+
+  status = mok2->verify_file_buffer(mok2, data, data_size, sigdata, sigdata_size, path);
+  if (status != GRUB_EFI_SUCCESS)
+    {
+        grub_printf ("failed to verify file %s (err: 0x%lx)\n",
+                       path, (long)status);
+
+        return grub_error (GRUB_ERR_BAD_SIGNATURE, N_("bad MOK2 signature"));
+    }
+
+  grub_dprintf ("mok2verify", "succeeded to verify file %s\n", path);
+
+  return GRUB_ERR_NONE;
+}
+
+
+struct grub_file_verifier mok2_verifier =
+  {
+    .name = "mok2_verifier",
+    .init = mok2_verifier_init,
+    .write = mok2_verifier_write
+  };
+
+void
+grub_mok2_verifier_setup (void)
+{
+  if (grub_is_secured () != 1)
+    return;
+
+  grub_verifier_register (&mok2_verifier);
+}
diff --git a/grub-core/loader/efi/linux.c b/grub-core/loader/efi/linux.c
index bfbd95a..f89ad8a 100644
--- a/grub-core/loader/efi/linux.c
+++ b/grub-core/loader/efi/linux.c
@@ -33,6 +33,7 @@
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
 #include <grub/verify.h>
+#include <grub/efi/mok2verify.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
@@ -381,6 +382,14 @@ grub_cmd_initrd (grub_command_t cmd __attribute__ ((unused)),
       goto fail;
     }
 
+#if defined(__i386__) || defined(__x86_64__)
+  if (grub_is_secured () == 1)
+    {
+      grub_dprintf ("mok2verify", "mok2verify enabled, falling back to legacy initrd loading process\n");
+      return grub_cmd_initrd_x86_legacy (cmd, argc, argv);
+    }
+#endif
+
 #if defined(__i386__) || defined(__x86_64__)
   if (!initrd_use_loadfile2)
     return grub_cmd_initrd_x86_legacy (cmd, argc, argv);
@@ -462,6 +471,18 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
 
   grub_dl_ref (my_mod);
 
+#if defined(__i386__) || defined(__x86_64__)
+  if (grub_is_secured () == 1)
+    {
+      grub_dprintf ("mok2verify", "mok2verify enabled, falling back to legacy Linux kernel loader\n");
+      err = grub_cmd_linux_x86_legacy (cmd, argc, argv);
+      if (err == GRUB_ERR_NONE)
+        return GRUB_ERR_NONE;
+      else
+        goto fail;
+    }
+#endif
+
   if (grub_is_shim_lock_enabled () == true)
     {
 #if defined(__i386__) || defined(__x86_64__)
diff --git a/include/grub/efi/api.h b/include/grub/efi/api.h
index d44d00a..a9f366e 100644
--- a/include/grub/efi/api.h
+++ b/include/grub/efi/api.h
@@ -379,6 +379,11 @@
     {0xb6, 0xc7, 0x44, 0x0b, 0x29, 0xbb, 0x8c, 0x4f } \
   }
 
+#define EFI_MOK2_VERIFY_PROTOCOL_GUID \
+  { 0x4eda73ad, 0x07aa, 0x4b7a, \
+    { 0xa1, 0x91, 0xd4, 0xd4, 0x10, 0xfb, 0x8c, 0xb4 } \
+  }
+
 struct grub_efi_sal_system_table
 {
   grub_uint32_t signature;
@@ -1815,4 +1820,29 @@ struct initrd_media_device_path {
 } GRUB_PACKED;
 typedef struct initrd_media_device_path initrd_media_device_path_t;
 
+typedef struct efi_mok2_verify_protocol efi_mok2_verify_protocol_t;
+
+typedef grub_efi_status_t
+(__grub_efi_api *grub_efi_mok2_verify_signature) (efi_mok2_verify_protocol_t *this,
+                void *signature,
+                grub_efi_uintn_t signature_size,
+                void *data, grub_efi_uintn_t data_size);
+
+typedef grub_efi_status_t
+(__grub_efi_api *grub_efi_mok2_verify_file_buffer) (efi_mok2_verify_protocol_t *this,
+                void **data, grub_efi_uintn_t *data_size,
+                void *sigdata, grub_efi_uintn_t sigdata_size,
+                const grub_efi_char16_t *path);
+
+typedef grub_efi_status_t
+(__grub_efi_api *grub_efi_mok2_verify_file) (efi_mok2_verify_protocol_t *this,
+                const grub_efi_char16_t *path);
+
+struct efi_mok2_verify_protocol {
+  grub_efi_uint8_t revision;
+  grub_efi_mok2_verify_signature verify_signature;
+  grub_efi_mok2_verify_file_buffer verify_file_buffer;
+  grub_efi_mok2_verify_file verify_file;
+};
+
 #endif /* ! GRUB_EFI_API_HEADER */
diff --git a/include/grub/efi/mok2verify.h b/include/grub/efi/mok2verify.h
new file mode 100644
index 0000000..00db96f
--- /dev/null
+++ b/include/grub/efi/mok2verify.h
@@ -0,0 +1,42 @@
+/*
+ * mok2verify.h - interface to MOK2 Verify Protocol
+ *
+ * BSD 2-clause "Simplified" License
+ *
+ * Copyright (c) 2017, Lans Zhang <jia.zhang@windriver.com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef GRUB_EFI_MOK2_VERIFY_HEADER
+#define GRUB_EFI_MOK2_VERIFY_HEADER 1
+
+#include <grub/types.h>
+
+extern int
+EXPORT_FUNC (grub_is_secured) (void);
+
+extern void
+grub_mok2_verifier_setup(void);
+
+#endif	/* ! GRUB_EFI_MOK2_VERIFY_HEADER */
-- 
2.25.1

